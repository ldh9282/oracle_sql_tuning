-- =============================================================================
-- table access path 
-- =============================================================================
-- 1. full table access scan
-- 테이블 전체 행 읽고 필요한 행 반환
-- 테이블이 작을 때 굳이 인덱스를 쓸 필요없을때,
-- 테이블이 클 때 많은 행을 반환하여 인덱스를 쓸 필요없을때 옵티마이저가 선택
-- 그러나 대부분 상황에서 풀 테이블 스캔은 Bad SQL임
-- =============================================================================
-- 풀테이블 스캔의 원인은
-- 적절한 인덱스가 없을 때,
-- selectivity(카디널리티, 고유한 행) is low,
-- table is very small,
-- full table scan hint를 직접 사용했을 때(수동지정이기에 이게 낫다는 확신이 있어야함)
-- =============================================================================
-- where 절이 없으므로 풀테이블 스캔
select * from employees; 
-- salary에 적절한 인덱스가 없음
select * from employees where salary > 3000;
-- employee_id에 인덱스가 있지만 테이블이 작아서 풀테이블 스캔
select * from employees where employee_id > 100;
-- =============================================================================
-- 2. table access by ROWID
-- where 절에 ROWID를 직접 사용할 때(ROWID를 사용하면 가장 빠르지만, 100% 결과에 확신필요)
-- select * 할때 유니크 인덱스 스캔하면 (CPU 코스트값 = ROWID인덱스 스캔한 코스트 + 유니크인덱스 스캔 코스트)
-- 고로 select * 할때 ROWID스캔이 유니크 인덱스 스캔보다 빠름
-- 근데 ROWID가 변하지 않는 테이블에다 같은 ROWID를 가져올 필요가 있는 경우가 흔치도 않고
-- ROWID가 변치않는 것을 기대하기 위해 INSERT, DELETE를 사용하지 않는 테이블도 흔치 않음
-- 그리고 UPDATE는 ROWID가 대부분 변하지 않을거 같지만 
-- 때로는 공간최적화를 위해 Block이 move하면서 ROWID가 변할 수도 있음
-- 고로 사용하지 않는 것을 추천
-- =============================================================================
-- ROWID를 얻어내기 위한 기믹
select rowid from employees where employee_id = 100;
-- table access by ROWID
select rowid from employees where rowid = 'AAAEATAAEAAAADNAAA';
-- ROWID SCAN이 아님
select rowid, employee_id from employees where employee_id = 100;
-- 그러나 인덱스를 사용하지 않는 다른 컬럼이 드러가는 순간 ROWID스캔이 먼저 수행됨
select rowid, employee_id, email from employees where employee_id = 100;
-- 이렇게 간접적으로 ROWID스캔이 수행되는건 성능에 문제되지 않아서 걱정하지 않아도 된다
-- 애초에 ROWID스캔이 성능에 문제되어서 쓰이지 않는 것이 아니라 직접 ROWID스캔을 노리고
-- 사용할 때 결과를 예측하기 힘든 것 때문에 직접사용을 권장하지 않는것이다
-- =============================================================================
-- 번외로 *를 사용하면 미비하지만 
-- 똑같은 ROWID스캔을 할때 더 많은 CPU_COST가 들어가는 것을 알 수 있다
-- 그래서 되도록 필요한 컬럼만 지정하라는 얘기가 그 뜻이다.(그러나 개발시 효율을 따지면 그리 크지 않아서 실제운영단계에서 수정해도 됨)
select * from employees where employee_id = 100;
-- =============================================================================


